getwd()
install.packages('../Downloads/rJava_0.9-5.tgz')
install.packages('../Downloads/rJava_0.9-5.tar.gz')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/XLConnect_0.2-5.tar.gz')
require(XLConnect)
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/rJava_0.9-5.tar')
install.packages('../Downloads/R.methodsS3_1.5.2.tgz')
list.files('~/Library/R/3.0//library')
remove.packages('rJava')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/R.oo_1.15.8.tgz')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/R.utils_1.28.4.tgz')
install.packages('../Downloads/rJava_0.9-5.tar')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/rJava_0.9-5.tgz')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/XLConnect_0.2-5.tar.gz')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/XLConnect_0.2-5 (1).tar.gz')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/XLConnect_0.2-5.tar.gz')
list.files('~/Library/R/3.0//library')
remove.packages('rJava')
install.packages('../Downloads/rJava_0.9-5.tgz')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/XLConnect_0.2-5.tar.gz')
list.files('~/Library/R/3.0//library')
remove.packages('R.methodsS3','R.oo','R.utils','rJava')
remove.packages('R.methodsS3')
remove.packages('R.oo')
remove.packages('R.utils')
remove.packages('rJava')
list.files('~/Library/R/3.0//library')
install.packages('../Downloads/R.methodsS3_1.5.2.tgz')
update.Package
update.Package()
install.packages("~/Downloads/ISLR_1.0.tgz")
?matrix
?rnorm
rnorm(10)
plot(rnorm(10))
x <- c(1,3,2,5)
x
x = c(1,6,2)
x
y = c(1,4,3)
y
length(x)
length(y)
x
y
x+y
ls()
rm(x,y,)
rm(x,y)
ls
ls()
x <- c(1,3,2,5)
y = c(1,4,3)
ls()
rm(list = ls())
ls()
x = matrix(data = c(1,2,3,4), nrow = 2, ncol = 2)
x
rm("x")
ls()
x = matrix(c(1,2,3,4), 2 2)
x = matrix(c(1,2,3,4), 2, 2)
x
x = matrix(c(1,2,3,4), 2, 2, byrow=TRUE)
x
sqrt(x)
x = matrix(c(1,2,3,4), 2, 2, bycolumn=TRUE)
x = matrix(c(1,2,3,4), 2, 2)
x
sqrt(x)
x
x^2
x=rnorm(50)
x
plot(x)
y=x+rnorm(50,mean = 50, sd = .1
)
y
scatter.smooth(x,y)
cor(x,y)
set.seed(1303)
rnorm(50)
(rnorm(50))
mean(rnorm(50))
set.seed(1303)
(rnorm(50))
?set.seed
rnorm(50)
set.seed(3)
y = rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x = rnorm(100)
y = rnorm(100)
plot(x,y)
plot(x,y)
plot(x)
plot(x,y,xlab = 'this is an x-label',ylab = 'this is a y-label')
pdf('figure.pdf')
plot(x,y,col = green)
plot(x,y,col = 'green)
)
)
')'
)
)
plot(x,y,col = 'green')
dev.off()
ls()
remove('x','y')
ls()
edit('')
?edit
edit('~/Documents/R/StanfordOnline_Jan2014/Rcode/ch2.R')
open'~/Documents/R/StanfordOnline_Jan2014/Rcode/ch2.R')
open('~/Documents/R/StanfordOnline_Jan2014/Rcode/ch2.R')
.9^50
1-.005
1-.9^50
29+1.1*50
(29+1.1*50)/1000
(29+1.1*250)/1000
ls()
set.seed(1)
?rnorm
rnorm(10)
hist(rnorm(10000))
x = rnorm(1000)
x = rnorm(100)
y = 2*x+rnorm(100)
dimension(x)
dimension(y)
s()
ls()
rm(list = ls())
require(ISLR)
attach(Wage)
fit=lm(wage~poly(age,4),data=Wage)
summary(fit)
summary(Wage)
agelims=range(age)
agelims
age.grid=seq(from=agelims[1],to=agelims[2])
age.grid
ls()
names(Wage)
preds=predict(fit,newdata=list(age=age.grid),se=TRUE)
names(preds)
preds$fit
se.bands=cbind(preds$fit+2*preds$se,preds$fit-2*preds$se)
plot(age,wage,col="darkgrey")
lines(age.grid,preds$fit,lwd=2,col="blue")
matlines(age.grid,se.bands,col="blue",lty=2)
fita=lm(wage~age+I(age^2)+I(age^3)+I(age^4),data=Wage)
summary(fita)
plot(fitted(fit),fitted(fita))
summary(fit)
fita=lm(wage~education,data=Wage)
fitb=lm(wage~education+age,data=Wage)
fitc=lm(wage~education+poly(age,2),data=Wage)
fitd=lm(wage~education+poly(age,3),data=Wage)
anova(fita,fitb,fitc,fitd)
fit=glm(I(wage>250) ~ poly(age,3), data=Wage, family=binomial)
summary(fit)
preds=predict(fit,list(age=age.grid),se=T)
se.bands=preds$fit + cbind(fit=0,lower=-2*preds$se,upper=2*preds$se)
se.bands[1:5,]
dimension(se.bands)
prob.bands=exp(se.bands)/(1+exp(se.bands))
matplot(age.grid,prob.bands,col="blue",lwd=c(2,1,1),lty=c(1,2,2),type="l",ylim=c(0,.1))
points(jitter(age),I(wage>250)/10,pch="|",cex=.5)
I(wage>250)
require(splines)
fit=lm(wage~bs(age,knots=c(25,40,60)),data=Wage)
plot(age,wage,col="darkgrey")
lines(age.grid,predict(fit,list(age=age.grid)),col="darkgreen",lwd=2)
abline(v=c(25,40,60),lty=2,col="darkgreen")
```
fit=smooth.spline(age,wage,df=16)
lines(fit,col="red",lwd=2)
fit=smooth.spline(age,wage,cv=TRUE)
lines(fit,col="purple",lwd=2)
fit
require(gam)
install.packages("gam")
require(gam)
gam1=gam(wage~s(age,df=4)+s(year,df=4)+education,data=Wage)
class(education)
table(factor)
table(education)
par(mfrow=c(1,3))
plot(gam1,se=T)
gam2=gam(I(wage>250)~s(age,df=4)+s(year,df=4)+education,data=Wage,family=binomial)
plot(gam2)
gam2a=gam(I(wage>250)~s(age,df=4)+year+education,data=Wage,family=binomial)
anova(gam2a,gam2,test="Chisq")
par(mfrow=c(1,3))
lm1=lm(wage~ns(age,df=4)+ns(year,df=4)+education,data=Wage)
plot.gam(lm1,se=T)
pwd
getwd()
list.files('../Documents/R/StanfordOnline_Jan2014/DataSet/')
load('../Documents/R/StanfordOnline_Jan2014/DataSet//7.R.RData')
ls()
summary(x)
summary(y)
plot(x,y)
par(mfrow=c(1,1))
plot(x,y)
fit = lm(y~x)
summary(fit)
fit2 = lm(y ~ 1+I(x)+I(x^2))
summary(fit2)
fit3 = lm(y ~ 1+x+I(x^2))
summary(fit3)
64+36
red = 64
blue = 36
total = red + blue
red/total*(1-red/total)+blue/total*(1-blue/total)
log
log(10)
-(red/total*log(red/total)+blue/total*log(blue/total))
mean[0.1,0.15,0.2,0.2,0.55,0.6,0.6,0.65, 0.7,0.75]
mean(1:3)
mean[1:3]
mean(0.1,0.15,0.2,0.2,0.55,0.6,0.6,0.65, 0.7,0.75)
(.1+.15+.2+.2+.55+.6+.6+.65+.7+.75)/10
library(tree)
require(tree)
library("tree")
install.packages('tree')
require('tree')
rm(list=ls())
require(ISLR)
require(tree)
attach(Carseats)
hist(Sales)
High=ifelse(Sales<=8,"No","Yes")
High
Carseats=data.frame(Carseats, High)
tree.carseats=tree(High~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
set.seed(1011)
train=sample(1:nrow(Carseats),250)
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
plot(tree.carseats);text(tree.carseats,pretty=0)
tree.pred=predict(tree.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+33)/150
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
plot(cv.carseats)
prune.carseats=prune.misclass(tree.carseats,best=13)
plot(prune.carseats);text(prune.carseats,pretty=0)
```
tree.pred=predict(prune.carseats,Carseats[-train,],type="class")
with(Carseats[-train,],table(tree.pred,High))
(72+32)/150
require(randomForest)
require(MASS)
install.packages('randomForest')
require(randomForest)
require(MASS)
set.seed(101)
dim(Boston)
train=sample(1:nrow(Boston),300)
?Boston
rf.boston=randomForest(medv~.,data=Boston,subset=train)
rf.boston
oob.err=double(13)
oob.err
test.err=double(13)
for(mtry in 1:13){
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]=with(Boston[-train,],mean((medv-pred)^2))
cat(mtry," ")
}
matplot(1:mtry,cbind(test.err,oob.err),pch=19,col=c("red","blue"),type="b",ylab="Mean Squared Error")
legend("topright",legend=c("OOB","Test"),pch=19,col=c("red","blue"))
require(gbm)
install.packages('gbm')
require(gbm)
boost.boston=gbm(medv~.,data=Boston[train,],distribution="gaussian",n.trees=10000,shrinkage=0.01,interaction.depth=4)
summary(boost.boston)
plot(boost.boston,i="lstat")
plot(boost.boston,i="rm")
n.trees=seq(from=100,to=10000,by=100)
predmat=predict(boost.boston,newdata=Boston[-train,],n.trees=n.trees)
dim(predmat)
berr=with(Boston[-train,],apply( (predmat-medv)^2,2,mean))
plot(n.trees,berr,pch=19,ylab="Mean Squared Error", xlab="# Trees",main="Boosting Test Error")
abline(h=min(test.err),col="red")
install.packages("KernSmooth")
library(KernSmooth)
?par
par(mfrow)
par('mfrow')
?pch
oauth_endpoints("github")
library(httr)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", "56b637a5baffac62cad9")
?oauth_app
rm(list=ls())
require(data.table)
fileUrl = 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv'
download.file(fileUrl, destfile='AmericanCommunitySurvey.csv',method='curl')
acs = fread('AmericanCommunitySurvey.csv')
View(acs)
require(sqldf)
?dbSendQuery
?dbConnect
?dbSendQuery
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs")
pwgtp1 = sqldf("select pwgtp1 from acs where AGEP < 50")
length(pwgtp1)
class(pwgtp1)
View(pwgtp1)
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
xyplot(y~x)
?xyplot
?qplot
library(ggplot2)
?qplot
rm(list=ls())
ls()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
print(p)
?trellis.par.set
?print.trellis
?par
?splom
rm(list=ls())
library(datasets)
data(airquality)
library(ggplot2)
?qplot
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
rm(list=ls())
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
ls()
g
library(movies)
qplot(votes, rating, data = movies)
?ggplot
ggplot(movies, aes(votes, rating))
ggplot(movies, aes(movies$votes, movies$rating))
g <- ggplot(movies, aes(votes, rating))
g
g + geom_line()
g
g<-g+geom_line()
g
?geom_bar
rm(list=ls())
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
g <- ggplot(movies, aes(votes, rating))
g<-g+geom_line()
g
rm(list=ls())
library(lattice)
?xyplot
x = rnorm(100)
y=x
ls()
p=xyplot(x~y)
p
rm(list=ls())
library(lattice)
?panel.abline
?text
?points
?axis
?llines
Ex = -4*.2+1*.8
Ex
Ex2 = (-4)^2*.2+1^2*.8
Ex2
Ex2-Ex^2
?rnorm
a=rnorm(100, 2, 1)
b=rnorm(100,-2, 1)
var(a-b)
a=rnorm(100, 2, 3)
b=rnorm(100,-2, 3)
var(a-b)
a=rnorm(100, 2, 3)
b=rnorm(100,-2, 3)
var(a-b)
a=rnorm(100, 2, 3)
b=rnorm(100,-2, 3)
var(a-b)
a=rnorm(100, 2, 3)
b=rnorm(100,-2, 3)
var(a-b)
?randu
?pmf
p <- c(.1, .2, .3, .4)
x <- 2 : 5
Ex = x(1)*p(1)+x(2)*p(2)+x(3)*p(3)+x(4)*p(4)
Ex = x[1]*p[1]+x[2]*p[2]+x[3]*p[3]+x[4]*p[4]
Ex2 = x[1]^2*p[1]+x[2]^2*p[2]+x[3]^2*p[3]+x[4]^2*p[4]
Ex2-Ex^2
Ex = -1*.5+1*.5
Ex
Ex2 = (-1)^2*.5+1^2*.5
Ex2-Ex^2
rm(list=ls())
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp[1,1]*temp[2,1]+temp[1,2]*temp[2,2]+temp[1,3]*temp[2,3]+temp[1,4]*temp[2,4]
rm(list=ls())
setwd('~/Experiments/MatlabToolBox//EEGprocess')
install.packages('knitr')
exit
